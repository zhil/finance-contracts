{
  "address": "0x6F2A34f3450312C2f02072F00eB79Ea489091bDa",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DELAY_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "contracts",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delegateProxyImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "endGrantAuthentication",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "authAddress",
          "type": "address"
        }
      ],
      "name": "grantInitialAuthentication",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialAddressSet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pending",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "proxies",
      "outputs": [
        {
          "internalType": "contract OwnableDelegateProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registerProxy",
      "outputs": [
        {
          "internalType": "contract OwnableDelegateProxy",
          "name": "proxy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "registerProxyFor",
      "outputs": [
        {
          "internalType": "contract OwnableDelegateProxy",
          "name": "proxy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registerProxyOverride",
      "outputs": [
        {
          "internalType": "contract OwnableDelegateProxy",
          "name": "proxy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "revokeAuthentication",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "startGrantAuthentication",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferAccessTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x680f269ce6290b62dd530ef56d1989fa97ece03236b85b60534692d5dd06ce7c",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0x6F2A34f3450312C2f02072F00eB79Ea489091bDa",
    "transactionIndex": 7,
    "gasUsed": "2046111",
    "logsBloom": "0x
    "blockHash": "0x8cb9647a4364c3cc0f1c12245911434453b62b66a207330cb00368965912d155",
    "transactionHash": "0x680f269ce6290b62dd530ef56d1989fa97ece03236b85b60534692d5dd06ce7c",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 9057073,
        "transactionHash": "0x680f269ce6290b62dd530ef56d1989fa97ece03236b85b60534692d5dd06ce7c",
        "address": "0x6F2A34f3450312C2f02072F00eB79Ea489091bDa",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b68d649f181bde8a8fee367535a606cc3c09fccd"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x8cb9647a4364c3cc0f1c12245911434453b62b66a207330cb00368965912d155"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 9057073,
        "transactionHash": "0x680f269ce6290b62dd530ef56d1989fa97ece03236b85b60534692d5dd06ce7c",
        "address": "0x51386c60D81e49Db0a474Ea00ED730f0028718f4",
        "topics": [
          "0x2165014523a6f4135deffed62d70149aad59b64de5aac51e3abbcbe2a83e2f7e"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 4,
        "blockHash": "0x8cb9647a4364c3cc0f1c12245911434453b62b66a207330cb00368965912d155"
      }
    ],
    "blockNumber": 9057073,
    "cumulativeGasUsed": "3993940",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "f21156e82218e2b880a2c84e92ddbd39",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELAY_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegateProxyImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"endGrantAuthentication\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authAddress\",\"type\":\"address\"}],\"name\":\"grantInitialAuthentication\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialAddressSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"proxies\",\"outputs\":[{\"internalType\":\"contract OwnableDelegateProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerProxy\",\"outputs\":[{\"internalType\":\"contract OwnableDelegateProxy\",\"name\":\"proxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"registerProxyFor\",\"outputs\":[{\"internalType\":\"contract OwnableDelegateProxy\",\"name\":\"proxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerProxyOverride\",\"outputs\":[{\"internalType\":\"contract OwnableDelegateProxy\",\"name\":\"proxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"revokeAuthentication\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"startGrantAuthentication\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferAccessTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Wyvern Protocol Developers\",\"kind\":\"dev\",\"methods\":{\"endGrantAuthentication(address)\":{\"details\":\"Registry owner only\",\"params\":{\"addr\":\"Address to which to grant permissions\"}},\"grantInitialAuthentication(address)\":{\"details\":\"No delay, can only be called once - after that the standard registry process with a delay must be used\",\"params\":{\"authAddress\":\"Address of the contract to grant authentication\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"registerProxy()\":{\"details\":\"Must be called by the user which the proxy is for, creates a new AuthenticatedProxy\",\"returns\":{\"proxy\":\"New AuthenticatedProxy contract\"}},\"registerProxyFor(address)\":{\"details\":\"Can be called by any user\",\"returns\":{\"proxy\":\"New AuthenticatedProxy contract\"}},\"registerProxyOverride()\":{\"details\":\"Must be called by the user which the proxy is for, creates a new AuthenticatedProxy\",\"returns\":{\"proxy\":\"New AuthenticatedProxy contract\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revokeAuthentication(address)\":{\"details\":\"Registry owner only\",\"params\":{\"addr\":\"Address of which to revoke permissions\"}},\"startGrantAuthentication(address)\":{\"details\":\"Registry owner only\",\"params\":{\"addr\":\"Address to which to grant permissions\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Registry\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"endGrantAuthentication(address)\":{\"notice\":\"End the process to enable access for specified contract after delay period has passed.\"},\"grantInitialAuthentication(address)\":{\"notice\":\"Grant authentication to the initial Flair contract\"},\"registerProxy()\":{\"notice\":\"Register a proxy contract with this registry\"},\"registerProxyFor(address)\":{\"notice\":\"Register a proxy contract with this registry\"},\"registerProxyOverride()\":{\"notice\":\"Register a proxy contract with this registry, overriding any existing proxy\"},\"revokeAuthentication(address)\":{\"notice\":\"Revoke access for specified contract. Can be done instantly.\"},\"startGrantAuthentication(address)\":{\"notice\":\"Start the process to enable access for specified contract. Subject to delay period.\"},\"transferAccessTo(address,address)\":{\"notice\":\"Transfer access\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Registry.sol\":\"Registry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x418cfe64226a974419f8ab7287ad4bb413156a4d7af8ab5d9bcaa5678d1a2f22\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"contracts/Registry.sol\":{\"content\":\"pragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./lib/proxy/OwnableDelegateProxy.sol\\\";\\nimport \\\"./lib/proxy/ProxyRegistryInterface.sol\\\";\\nimport \\\"./lib/proxy/AuthenticatedProxy.sol\\\";\\n\\n/**\\n * @title Registry\\n * @author Wyvern Protocol Developers\\n */\\ncontract Registry is Ownable, ProxyRegistryInterface {\\n    string public constant name = \\\"Flair Proxy Registry\\\";\\n\\n    /* Whether the initial auth address has been set. */\\n    bool public initialAddressSet = false;\\n\\n    /* DelegateProxy implementation contract. Must be initialized. */\\n    address public override delegateProxyImplementation;\\n\\n    /* Authenticated proxies by user. */\\n    mapping(address => OwnableDelegateProxy) public override proxies;\\n\\n    /* Contracts pending access. */\\n    mapping(address => uint256) public pending;\\n\\n    /* Contracts allowed to call those proxies. */\\n    mapping(address => bool) public contracts;\\n\\n    /* Delay period for adding an authenticated contract.\\n       This mitigates a particular class of potential attack on the Wyvern DAO (which owns this registry) - if at any point the value of assets held by proxy contracts exceeded the value of half the WYV supply (votes in the DAO),\\n       a malicious but rational attacker could buy half the Wyvern and grant themselves access to all the proxy contracts. A delay period renders this attack nonthreatening - given two weeks, if that happened, users would have\\n       plenty of time to notice and transfer their assets.\\n    */\\n    uint256 public DELAY_PERIOD = 2 weeks;\\n\\n    constructor() public {\\n        AuthenticatedProxy impl = new AuthenticatedProxy();\\n        impl.initialize(address(this), this);\\n        impl.setRevoke(true);\\n        delegateProxyImplementation = address(impl);\\n    }\\n\\n    /**\\n     * Grant authentication to the initial Flair contract\\n     *\\n     * @dev No delay, can only be called once - after that the standard registry process with a delay must be used\\n     * @param authAddress Address of the contract to grant authentication\\n     */\\n    function grantInitialAuthentication(address authAddress) public onlyOwner {\\n        require(!initialAddressSet, \\\"Flair Proxy Registry initial address already set\\\");\\n        initialAddressSet = true;\\n        contracts[authAddress] = true;\\n    }\\n\\n    /**\\n     * Start the process to enable access for specified contract. Subject to delay period.\\n     *\\n     * @dev Registry owner only\\n     * @param addr Address to which to grant permissions\\n     */\\n    function startGrantAuthentication(address addr) public onlyOwner {\\n        require(!contracts[addr] && pending[addr] == 0, \\\"Contract is already allowed in registry, or pending\\\");\\n        pending[addr] = block.timestamp;\\n    }\\n\\n    /**\\n     * End the process to enable access for specified contract after delay period has passed.\\n     *\\n     * @dev Registry owner only\\n     * @param addr Address to which to grant permissions\\n     */\\n    function endGrantAuthentication(address addr) public onlyOwner {\\n        require(\\n            !contracts[addr] && pending[addr] != 0 && ((pending[addr] + DELAY_PERIOD) < block.timestamp),\\n            \\\"Contract is no longer pending or has already been approved by registry\\\"\\n        );\\n        pending[addr] = 0;\\n        contracts[addr] = true;\\n    }\\n\\n    /**\\n     * Revoke access for specified contract. Can be done instantly.\\n     *\\n     * @dev Registry owner only\\n     * @param addr Address of which to revoke permissions\\n     */\\n    function revokeAuthentication(address addr) public onlyOwner {\\n        contracts[addr] = false;\\n    }\\n\\n    /**\\n     * Register a proxy contract with this registry\\n     *\\n     * @dev Must be called by the user which the proxy is for, creates a new AuthenticatedProxy\\n     * @return proxy New AuthenticatedProxy contract\\n     */\\n    function registerProxy() public returns (OwnableDelegateProxy proxy) {\\n        return registerProxyFor(msg.sender);\\n    }\\n\\n    /**\\n     * Register a proxy contract with this registry, overriding any existing proxy\\n     *\\n     * @dev Must be called by the user which the proxy is for, creates a new AuthenticatedProxy\\n     * @return proxy New AuthenticatedProxy contract\\n     */\\n    function registerProxyOverride() public returns (OwnableDelegateProxy proxy) {\\n        proxy = new OwnableDelegateProxy(\\n            msg.sender,\\n            delegateProxyImplementation,\\n            abi.encodeWithSignature(\\\"initialize(address,address)\\\", msg.sender, address(this))\\n        );\\n        proxies[msg.sender] = proxy;\\n        return proxy;\\n    }\\n\\n    /**\\n     * Register a proxy contract with this registry\\n     *\\n     * @dev Can be called by any user\\n     * @return proxy New AuthenticatedProxy contract\\n     */\\n    function registerProxyFor(address user) public returns (OwnableDelegateProxy proxy) {\\n        require(address(proxies[user]) == address(0), \\\"User already has a proxy\\\");\\n        proxy = new OwnableDelegateProxy(\\n            user,\\n            delegateProxyImplementation,\\n            abi.encodeWithSignature(\\\"initialize(address,address)\\\", user, address(this))\\n        );\\n        proxies[user] = proxy;\\n        return proxy;\\n    }\\n\\n    /**\\n     * Transfer access\\n     */\\n    function transferAccessTo(address from, address to) public {\\n        OwnableDelegateProxy proxy = proxies[from];\\n\\n        /* CHECKS */\\n        require(OwnableDelegateProxy(payable(msg.sender)) == proxy, \\\"Proxy transfer can only be called by the proxy\\\");\\n        require(address(proxies[to]) == address(0), \\\"Proxy transfer has existing proxy as destination\\\");\\n\\n        /* EFFECTS */\\n        delete proxies[from];\\n        proxies[to] = proxy;\\n    }\\n}\\n\",\"keccak256\":\"0x69883892ea5dfd5f1ec741b725d2736b1290bfa841c6d0ee610045f661466699\"},\"contracts/lib/proxy/AuthenticatedProxy.sol\":{\"content\":\"pragma solidity 0.8.3;\\n\\nimport \\\"../../Registry.sol\\\";\\nimport \\\"./TokenRecipient.sol\\\";\\nimport \\\"./OwnedUpgradeabilityStorage.sol\\\";\\n\\n/**\\n * @title AuthenticatedProxy\\n * @author Wyvern Protocol Developers\\n */\\ncontract AuthenticatedProxy is TokenRecipient, OwnedUpgradeabilityStorage {\\n    /* Whether initialized. */\\n    bool initialized = false;\\n\\n    /* Address which owns this proxy. */\\n    address public user;\\n\\n    /* Associated registry with contract authentication information. */\\n    Registry public registry;\\n\\n    /* Whether access has been revoked. */\\n    bool public revoked;\\n\\n    /* Delegate call could be used to atomically transfer multiple assets owned by the proxy contract with one order. */\\n    enum HowToCall {Call, DelegateCall}\\n\\n    /* Event fired when the proxy access is revoked or unrevoked. */\\n    event Revoked(bool revoked);\\n\\n    /**\\n     * Initialize an AuthenticatedProxy\\n     *\\n     * @param addrUser Address of user on whose behalf this proxy will act\\n     * @param addrRegistry Address of Registry contract which will manage this proxy\\n     */\\n    function initialize(address addrUser, Registry addrRegistry) public {\\n        require(!initialized, \\\"Authenticated proxy already initialized\\\");\\n        initialized = true;\\n        user = addrUser;\\n        registry = addrRegistry;\\n    }\\n\\n    /**\\n     * Set the revoked flag (allows a user to revoke Registry access)\\n     *\\n     * @dev Can be called by the user only\\n     * @param revoke Whether or not to revoke access\\n     */\\n    function setRevoke(bool revoke) public {\\n        require(msg.sender == user, \\\"Authenticated proxy can only be revoked by its user\\\");\\n        revoked = revoke;\\n        emit Revoked(revoke);\\n    }\\n\\n    /**\\n     * Execute a message call from the proxy contract\\n     *\\n     * @dev Can be called by the user, or by a contract authorized by the registry as long as the user has not revoked access\\n     * @param dest Address to which the call will be sent\\n     * @param howToCall Which kind of call to make\\n     * @param data Calldata to send\\n     * @return result Result of the call (success or failure)\\n     */\\n    function proxy(\\n        address dest,\\n        HowToCall howToCall,\\n        bytes memory data\\n    ) public returns (bool result) {\\n        require(\\n            msg.sender == user || (!revoked && registry.contracts(msg.sender)),\\n            \\\"Authenticated proxy can only be called by its user, or by a contract authorized by the registry as long as the user has not revoked access\\\"\\n        );\\n        bytes memory ret;\\n        if (howToCall == HowToCall.Call) {\\n            (result, ret) = dest.call(data);\\n        } else if (howToCall == HowToCall.DelegateCall) {\\n            (result, ret) = dest.delegatecall(data);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * Execute a message call and assert success\\n     *\\n     * @dev Same functionality as `proxy`, just asserts the return value\\n     * @param dest Address to which the call will be sent\\n     * @param howToCall What kind of call to make\\n     * @param data Calldata to send\\n     */\\n    function proxyAssert(\\n        address dest,\\n        HowToCall howToCall,\\n        bytes memory data\\n    ) public {\\n        require(proxy(dest, howToCall, data), \\\"Proxy assertion failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1061d249246ac8cf1c2036e00bbece5749b966e7a7c1d868bd5b63ca7281e48f\"},\"contracts/lib/proxy/OwnableDelegateProxy.sol\":{\"content\":\"pragma solidity 0.8.3;\\n\\nimport \\\"./OwnedUpgradabilityProxy.sol\\\";\\n\\n/**\\n * @title OwnableDelegateProxy\\n * @author Wyvern Protocol Developers\\n */\\ncontract OwnableDelegateProxy is OwnedUpgradeabilityProxy {\\n    constructor(\\n        address owner,\\n        address initialImplementation,\\n        bytes memory data\\n    ) public {\\n        setUpgradeabilityOwner(owner);\\n        _upgradeTo(initialImplementation);\\n        (bool success, ) = initialImplementation.delegatecall(data);\\n        require(success, \\\"OwnableDelegateProxy failed implementation\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xae7b6391a07d758efe6dc5dbfd783bb30150a1a6f69045bd477c382d77f406ec\"},\"contracts/lib/proxy/OwnedUpgradabilityProxy.sol\":{\"content\":\"pragma solidity 0.8.3;\\n\\nimport \\\"./Proxy.sol\\\";\\nimport \\\"./OwnedUpgradeabilityStorage.sol\\\";\\n\\n/**\\n * @title OwnedUpgradeabilityProxy\\n * @dev This contract combines an upgradeability proxy with basic authorization control functionalities\\n */\\ncontract OwnedUpgradeabilityProxy is Proxy, OwnedUpgradeabilityStorage {\\n    /**\\n     * @dev Event to show ownership has been transferred\\n     * @param previousOwner representing the address of the previous owner\\n     * @param newOwner representing the address of the new owner\\n     */\\n    event ProxyOwnershipTransferred(address previousOwner, address newOwner);\\n\\n    /**\\n     * @dev This event will be emitted every time the implementation gets upgraded\\n     * @param implementation representing the address of the upgraded implementation\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Tells the address of the current implementation\\n     * @return address of the current implementation\\n     */\\n    function implementation() public view override returns (address) {\\n        return _implementation;\\n    }\\n\\n    /**\\n     * @dev Tells the proxy type (EIP 897)\\n     * @return proxyTypeId Proxy type, 2 for forwarding proxy\\n     */\\n    function proxyType() public pure override returns (uint256 proxyTypeId) {\\n        return 2;\\n    }\\n\\n    /**\\n     * @dev Upgrades the implementation address\\n     * @param implementation representing the address of the new implementation to be set\\n     */\\n    function _upgradeTo(address implementation) internal {\\n        require(_implementation != implementation, \\\"Proxy already uses this implementation\\\");\\n        _implementation = implementation;\\n        emit Upgraded(implementation);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyProxyOwner() {\\n        require(msg.sender == proxyOwner(), \\\"Only the proxy owner can call this method\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Tells the address of the proxy owner\\n     * @return the address of the proxy owner\\n     */\\n    function proxyOwner() public view returns (address) {\\n        return upgradeabilityOwner();\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function transferProxyOwnership(address newOwner) public onlyProxyOwner {\\n        require(newOwner != address(0), \\\"New owner cannot be the null address\\\");\\n        emit ProxyOwnershipTransferred(proxyOwner(), newOwner);\\n        setUpgradeabilityOwner(newOwner);\\n    }\\n\\n    /**\\n     * @dev Allows the upgradeability owner to upgrade the current implementation of the proxy.\\n     * @param implementation representing the address of the new implementation to be set.\\n     */\\n    function upgradeTo(address implementation) public onlyProxyOwner {\\n        _upgradeTo(implementation);\\n    }\\n\\n    /**\\n     * @dev Allows the upgradeability owner to upgrade the current implementation of the proxy\\n     * and delegatecall the new implementation for initialization.\\n     * @param implementation representing the address of the new implementation to be set.\\n     * @param data represents the msg.data to bet sent in the low level call. This parameter may include the function\\n     * signature of the implementation to be called with the needed payload\\n     */\\n    function upgradeToAndCall(address implementation, bytes memory data) public payable onlyProxyOwner {\\n        upgradeTo(implementation);\\n        (bool success, ) = address(this).delegatecall(data);\\n        require(success, \\\"Call failed after proxy upgrade\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xe43c450cfd48f6c91216477da80161167c4c4b7a044d03a82dbb840ccfb69f5d\"},\"contracts/lib/proxy/OwnedUpgradeabilityStorage.sol\":{\"content\":\"pragma solidity 0.8.3;\\n\\n/**\\n * @title OwnedUpgradeabilityStorage\\n * @dev This contract keeps track of the upgradeability owner\\n */\\ncontract OwnedUpgradeabilityStorage {\\n    // Current implementation\\n    address internal _implementation;\\n\\n    // Owner of the contract\\n    address private _upgradeabilityOwner;\\n\\n    /**\\n     * @dev Tells the address of the owner\\n     * @return the address of the owner\\n     */\\n    function upgradeabilityOwner() public view returns (address) {\\n        return _upgradeabilityOwner;\\n    }\\n\\n    /**\\n     * @dev Sets the address of the owner\\n     */\\n    function setUpgradeabilityOwner(address newUpgradeabilityOwner) internal {\\n        _upgradeabilityOwner = newUpgradeabilityOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x0d931655e2f1e77788c21c29538379e00c64c0dca45a94338101a5a51ca6125d\"},\"contracts/lib/proxy/Proxy.sol\":{\"content\":\"pragma solidity 0.8.3;\\n\\n/**\\n * @title Proxy\\n * @dev Gives the possibility to delegate any call to a foreign implementation.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Tells the address of the implementation where every call will be delegated.\\n     * @return address of the implementation to which it will be delegated\\n     */\\n    function implementation() public view virtual returns (address);\\n\\n    /**\\n     * @dev Tells the type of proxy (EIP 897)\\n     * @return proxyTypeId Type of proxy, 2 for upgradeable proxy\\n     */\\n    function proxyType() public pure virtual returns (uint256 proxyTypeId);\\n\\n    /**\\n     * @dev Fallback function allowing to perform a delegatecall to the given implementation.\\n     * This function will return whatever the implementation call returns\\n     */\\n    fallback() external payable {\\n        address _impl = implementation();\\n        require(_impl != address(0), \\\"Proxy implementation required\\\");\\n\\n        assembly {\\n            let ptr := mload(0x40)\\n            calldatacopy(ptr, 0, calldatasize())\\n            let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0)\\n            let size := returndatasize()\\n            returndatacopy(ptr, 0, size)\\n\\n            switch result\\n                case 0 {\\n                    revert(ptr, size)\\n                }\\n                default {\\n                    return(ptr, size)\\n                }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc54e0516487a815f3e0dde9936eec02a3bfb962b0c05c23d65f7073ca56bb28a\"},\"contracts/lib/proxy/ProxyRegistryInterface.sol\":{\"content\":\"pragma solidity 0.8.3;\\n\\nimport \\\"./OwnableDelegateProxy.sol\\\";\\n\\n/**\\n * @title ProxyRegistryInterface\\n * @author Wyvern Protocol Developers\\n */\\ninterface ProxyRegistryInterface {\\n    function delegateProxyImplementation() external returns (address);\\n\\n    function proxies(address owner) external returns (OwnableDelegateProxy);\\n}\\n\",\"keccak256\":\"0x55a13fc483b5b51ae922442dc2b89eb7b45c273ab475cd8c180ff5491c574d04\"},\"contracts/lib/proxy/TokenRecipient.sol\":{\"content\":\"pragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/**\\n * @title TokenRecipient\\n * @author Wyvern Protocol Developers\\n */\\ncontract TokenRecipient {\\n    event ReceivedEther(address indexed sender, uint256 amount);\\n    event ReceivedTokens(address indexed from, uint256 value, address indexed token, bytes extraData);\\n\\n    /**\\n     * @dev Receive tokens and generate a log event\\n     * @param from Address from which to transfer tokens\\n     * @param value Amount of tokens to transfer\\n     * @param token Address of token\\n     * @param extraData Additional data to log\\n     */\\n    function receiveApproval(\\n        address from,\\n        uint256 value,\\n        address token,\\n        bytes memory extraData\\n    ) public {\\n        ERC20 t = ERC20(token);\\n        require(t.transferFrom(from, address(this), value), \\\"ERC20 token transfer failed\\\");\\n        emit ReceivedTokens(from, value, token, extraData);\\n    }\\n\\n    /**\\n     * @dev Receive Ether and generate a log event\\n     */\\n    fallback() external payable {\\n        emit ReceivedEther(msg.sender, msg.value);\\n    }\\n}\\n\",\"keccak256\":\"0x80c55fe41247c113cc1788fb83608b4dd24514dc4f23f450dd2800b56d889c0f\"}},\"version\":1}",
  "bytecode": "0x60806040526000805460ff60a01b191690556212750060055534801561002457600080fd5b5061002e3361013d565b600060405161003c9061018d565b604051809103906000f080158015610058573d6000803e3d6000fd5b5060405163485cc95560e01b8152306004820181905260248201529091506001600160a01b0382169063485cc95590604401600060405180830381600087803b1580156100a457600080fd5b505af11580156100b8573d6000803e3d6000fd5b5050604051634c93505f60e01b8152600160048201526001600160a01b0384169250634c93505f9150602401600060405180830381600087803b1580156100fe57600080fd5b505af1158015610112573d6000803e3d6000fd5b5050600180546001600160a01b0319166001600160a01b0394909416939093179092555061019a9050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610a848061183283390190565b611689806101a96000396000f3fe60806040523480156200001157600080fd5b5060043610620000f95760003560e01c806268674114620000fe57806306fdde0314620001325780631a86ac4f146200017557806338b6e407146200019b57806353376d1f14620001b45780635eebea2014620001cb578063631d9e3f14620001fd57806369dc9ff31462000207578063715018a6146200022d5780638da5cb5b146200023757806397204d8e1462000241578063c45527911462000255578063d4e8e0631462000281578063dcfa92221462000298578063ddd81f8214620002af578063e71a02e114620002b9578063ef7f383414620002c3578063f2fde38b14620002da575b600080fd5b620001156200010f36600462000b21565b620002f1565b6040516001600160a01b0390911681526020015b60405180910390f35b6200016660405180604001604052806014815260200173466c6169722050726f787920526567697374727960601b81525081565b60405162000129919062000c1b565b6000546200018a90600160a01b900460ff1681565b604051901515815260200162000129565b620001b2620001ac36600462000b21565b62000418565b005b620001b2620001c536600462000b21565b62000574565b620001ee620001dc36600462000b21565b60036020526000908152604090205481565b60405190815260200162000129565b62000115620005c9565b6200018a6200021836600462000b21565b60046020526000908152604090205460ff1681565b620001b262000681565b62000115620006c3565b60015462000115906001600160a01b031681565b620001156200026636600462000b21565b6002602052600090815260409020546001600160a01b031681565b620001b26200029236600462000b21565b620006d2565b620001b2620002a936600462000b45565b620007cc565b6200011562000911565b620001ee60055481565b620001b2620002d436600462000b21565b62000923565b620001b2620002eb36600462000b21565b62000a02565b6001600160a01b03818116600090815260026020526040812054909116156200035c5760405162461bcd60e51b81526020600482015260186024820152775573657220616c72656164792068617320612070726f787960401b60448201526064015b60405180910390fd5b60015460405183916001600160a01b03169062000380908390309060240162000bca565b60408051601f198184030181529181526020820180516001600160e01b031663485cc95560e01b17905251620003b69062000afb565b620003c49392919062000be4565b604051809103906000f080158015620003e1573d6000803e3d6000fd5b506001600160a01b03838116600090815260026020526040902080546001600160a01b03191691831691909117905590505b919050565b3362000423620006c3565b6001600160a01b0316146200044c5760405162461bcd60e51b8152600401620003539062000c30565b6001600160a01b03811660009081526004602052604090205460ff161580156200048d57506001600160a01b03811660009081526003602052604090205415155b8015620004c057506005546001600160a01b0382166000908152600360205260409020544291620004be9162000c65565b105b620005435760405162461bcd60e51b815260206004820152604660248201527f436f6e7472616374206973206e6f206c6f6e6765722070656e64696e67206f7260448201527f2068617320616c7265616479206265656e20617070726f76656420627920726560648201526567697374727960d01b608482015260a40162000353565b6001600160a01b0316600090815260036020908152604080832083905560049091529020805460ff19166001179055565b336200057f620006c3565b6001600160a01b031614620005a85760405162461bcd60e51b8152600401620003539062000c30565b6001600160a01b03166000908152600460205260409020805460ff19169055565b60015460405160009133916001600160a01b0390911690620005f2908390309060240162000bca565b60408051601f198184030181529181526020820180516001600160e01b031663485cc95560e01b17905251620006289062000afb565b620006369392919062000be4565b604051809103906000f08015801562000653573d6000803e3d6000fd5b5033600090815260026020526040902080546001600160a01b0319166001600160a01b038316179055919050565b336200068c620006c3565b6001600160a01b031614620006b55760405162461bcd60e51b8152600401620003539062000c30565b620006c1600062000aab565b565b6000546001600160a01b031690565b33620006dd620006c3565b6001600160a01b031614620007065760405162461bcd60e51b8152600401620003539062000c30565b6001600160a01b03811660009081526004602052604090205460ff161580156200074657506001600160a01b038116600090815260036020526040902054155b620007b05760405162461bcd60e51b815260206004820152603360248201527f436f6e747261637420697320616c726561647920616c6c6f77656420696e2072604482015272656769737472792c206f722070656e64696e6760681b606482015260840162000353565b6001600160a01b03166000908152600360205260409020429055565b6001600160a01b03808316600090815260026020526040902054163381146200084f5760405162461bcd60e51b815260206004820152602e60248201527f50726f7879207472616e736665722063616e206f6e6c792062652063616c6c6560448201526d64206279207468652070726f787960901b606482015260840162000353565b6001600160a01b038281166000908152600260205260409020541615620008d25760405162461bcd60e51b815260206004820152603060248201527f50726f7879207472616e7366657220686173206578697374696e672070726f7860448201526f3c9030b9903232b9ba34b730ba34b7b760811b606482015260840162000353565b6001600160a01b0392831660009081526002602052604080822080546001600160a01b0319908116909155938516825290208054919093169116179055565b60006200091e33620002f1565b905090565b336200092e620006c3565b6001600160a01b031614620009575760405162461bcd60e51b8152600401620003539062000c30565b600054600160a01b900460ff1615620009cc5760405162461bcd60e51b815260206004820152603060248201527f466c6169722050726f787920526567697374727920696e697469616c2061646460448201526f1c995cdcc8185b1c9958591e481cd95d60821b606482015260840162000353565b6000805460ff60a01b1916600160a01b1781556001600160a01b039091168152600460205260409020805460ff19166001179055565b3362000a0d620006c3565b6001600160a01b03161462000a365760405162461bcd60e51b8152600401620003539062000c30565b6001600160a01b03811662000a9d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840162000353565b62000aa88162000aab565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6109c98062000c8b83390190565b80356001600160a01b03811681146200041357600080fd5b60006020828403121562000b33578081fd5b62000b3e8262000b09565b9392505050565b6000806040838503121562000b58578081fd5b62000b638362000b09565b915062000b736020840162000b09565b90509250929050565b60008151808452815b8181101562000ba35760208185018101518683018201520162000b85565b8181111562000bb55782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0384811682528316602082015260606040820181905260009062000c129083018462000b7c565b95945050505050565b60006020825262000b3e602083018462000b7c565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000821982111562000c8557634e487b7160e01b81526011600452602481fd5b50019056fe608060405234801561001057600080fd5b506040516109c93803806109c983398101604081905261002f916101f0565b600180546001600160a01b0319166001600160a01b0385161790556100538261011f565b6000826001600160a01b03168260405161006d91906102bc565b600060405180830381855af49150503d80600081146100a8576040519150601f19603f3d011682016040523d82523d6000602084013e6100ad565b606091505b50509050806101165760405162461bcd60e51b815260206004820152602a60248201527f4f776e61626c6544656c656761746550726f7879206661696c656420696d706c60448201526932b6b2b73a30ba34b7b760b11b60648201526084015b60405180910390fd5b5050505061031e565b6000546001600160a01b038281169116141561018c5760405162461bcd60e51b815260206004820152602660248201527f50726f787920616c72656164792075736573207468697320696d706c656d656e6044820152653a30ba34b7b760d11b606482015260840161010d565b600080546001600160a01b0319166001600160a01b038316908117825560405190917fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b91a250565b80516001600160a01b03811681146101eb57600080fd5b919050565b600080600060608486031215610204578283fd5b61020d846101d4565b925061021b602085016101d4565b60408501519092506001600160401b0380821115610237578283fd5b818601915086601f83011261024a578283fd5b81518181111561025c5761025c610308565b604051601f8201601f19908116603f0116810190838211818310171561028457610284610308565b8160405282815289602084870101111561029c578586fd5b6102ad8360208301602088016102d8565b80955050505050509250925092565b600082516102ce8184602087016102d8565b9190910192915050565b60005b838110156102f35781810151838201526020016102db565b83811115610302576000848401525b50505050565b634e487b7160e01b600052604160045260246000fd5b61069c8061032d6000396000f3fe6080604052600436106100605760003560e01c8063025313a2146100ec5780633659cfe61461011e5780634555d5c9146101405780634f1ef2861461015c5780635c60da1b1461016f5780636fde820214610184578063f1739cae14610199575b600061006a6101b9565b90506001600160a01b0381166100c75760405162461bcd60e51b815260206004820152601d60248201527f50726f787920696d706c656d656e746174696f6e20726571756972656400000060448201526064015b60405180910390fd5b60405136600082376000803683855af43d806000843e8180156100e8578184f35b8184fd5b3480156100f857600080fd5b506101016101c8565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561012a57600080fd5b5061013e6101393660046104f1565b6101d7565b005b34801561014c57600080fd5b5060405160028152602001610115565b61013e61016a366004610512565b61021b565b34801561017b57600080fd5b506101016101b9565b34801561019057600080fd5b5061010161030c565b3480156101a557600080fd5b5061013e6101b43660046104f1565b61031b565b6000546001600160a01b031690565b60006101d261030c565b905090565b6101df6101c8565b6001600160a01b0316336001600160a01b03161461020f5760405162461bcd60e51b81526004016100be90610607565b61021881610420565b50565b6102236101c8565b6001600160a01b0316336001600160a01b0316146102535760405162461bcd60e51b81526004016100be90610607565b61025c826101d7565b6000306001600160a01b03168260405161027691906105ce565b600060405180830381855af49150503d80600081146102b1576040519150601f19603f3d011682016040523d82523d6000602084013e6102b6565b606091505b50509050806103075760405162461bcd60e51b815260206004820152601f60248201527f43616c6c206661696c65642061667465722070726f787920757067726164650060448201526064016100be565b505050565b6001546001600160a01b031690565b6103236101c8565b6001600160a01b0316336001600160a01b0316146103535760405162461bcd60e51b81526004016100be90610607565b6001600160a01b0381166103b55760405162461bcd60e51b8152602060048201526024808201527f4e6577206f776e65722063616e6e6f7420626520746865206e756c6c206164646044820152637265737360e01b60648201526084016100be565b7f5a3e66efaa1e445ebd894728a69d6959842ea1e97bd79b892797106e270efcd96103de6101c8565b604080516001600160a01b03928316815291841660208301520160405180910390a1600180546001600160a01b0319166001600160a01b038316179055610218565b6000546001600160a01b038281169116141561048d5760405162461bcd60e51b815260206004820152602660248201527f50726f787920616c72656164792075736573207468697320696d706c656d656e6044820152653a30ba34b7b760d11b60648201526084016100be565b600080546001600160a01b0319166001600160a01b038316908117825560405190917fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b91a250565b80356001600160a01b03811681146104ec57600080fd5b919050565b600060208284031215610502578081fd5b61050b826104d5565b9392505050565b60008060408385031215610524578081fd5b61052d836104d5565b915060208301356001600160401b0380821115610548578283fd5b818501915085601f83011261055b578283fd5b81358181111561056d5761056d610650565b604051601f8201601f19908116603f0116810190838211818310171561059557610595610650565b816040528281528860208487010111156105ad578586fd5b82602086016020830137856020848301015280955050505050509250929050565b60008251815b818110156105ee57602081860181015185830152016105d4565b818111156105fc5782828501525b509190910192915050565b60208082526029908201527f4f6e6c79207468652070726f7879206f776e65722063616e2063616c6c2074686040820152681a5cc81b595d1a1bd960ba1b606082015260800190565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220f9528ae947ce1e01d62da85ce898df81d4d4b1e0c205a80dff61e36ca1ddab0864736f6c63430008030033a2646970667358221220db9fbf980c46493a47c9d238f47938552abddca34232b139aa977c53c4bcbd8964736f6c6343000803003360806040526001805460ff60a01b1916905534801561001d57600080fd5b50610a578061002d6000396000f3fe6080604052600436106100765760003560e01c80631b0f7ba9146100ad5780633f801f91146100e2578063485cc955146101045780634c93505f146101245780634f8632ba1461014457806363d256ce146101715780636fde8202146101925780637b103999146101b05780638f4ffcb1146101d0575b60405134815233907fa419615bc8fda4c87663805ee2a3597a6d71c1d476911d9892f340d965bc7bf19060200160405180910390a2005b3480156100b957600080fd5b506100cd6100c8366004610821565b6101f0565b60405190151581526020015b60405180910390f35b3480156100ee57600080fd5b506101026100fd366004610821565b61047e565b005b34801561011057600080fd5b5061010261011f3660046107e9565b6104d3565b34801561013057600080fd5b5061010261013f3660046108ec565b61057e565b34801561015057600080fd5b50600254610164906001600160a01b031681565b6040516100d99190610947565b34801561017d57600080fd5b506003546100cd90600160a01b900460ff1681565b34801561019e57600080fd5b506001546001600160a01b0316610164565b3480156101bc57600080fd5b50600354610164906001600160a01b031681565b3480156101dc57600080fd5b506101026101eb366004610883565b61063a565b6002546000906001600160a01b031633148061029c5750600354600160a01b900460ff1615801561029c57506003546040516369dc9ff360e01b81526001600160a01b03909116906369dc9ff39061024c903390600401610947565b60206040518083038186803b15801561026457600080fd5b505afa158015610278573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029c919061090f565b6103605760405162461bcd60e51b815260206004820152608a6024820152600080516020610a0283398151915260448201527f63616c6c65642062792069747320757365722c206f72206279206120636f6e7460648201527f7261637420617574686f72697a6564206279207468652072656769737472792060848201527f6173206c6f6e6720617320746865207573657220686173206e6f74207265766f60a4820152696b65642061636365737360b01b60c482015260e4015b60405180910390fd5b6060600084600181111561038457634e487b7160e01b600052602160045260246000fd5b14156103ef57846001600160a01b0316836040516103a2919061092b565b6000604051808303816000865af19150503d80600081146103df576040519150601f19603f3d011682016040523d82523d6000602084013e6103e4565b606091505b509092509050610476565b600184600181111561041157634e487b7160e01b600052602160045260246000fd5b141561047657846001600160a01b03168360405161042f919061092b565b600060405180830381855af49150503d806000811461046a576040519150601f19603f3d011682016040523d82523d6000602084013e61046f565b606091505b5090925090505b509392505050565b6104898383836101f0565b6104ce5760405162461bcd60e51b8152602060048201526016602482015275141c9bde1e48185cdcd95c9d1a5bdb8819985a5b195960521b6044820152606401610357565b505050565b600154600160a01b900460ff161561053d5760405162461bcd60e51b815260206004820152602760248201527f41757468656e746963617465642070726f787920616c726561647920696e69746044820152661a585b1a5e995960ca1b6064820152608401610357565b6001805460ff60a01b1916600160a01b179055600280546001600160a01b039384166001600160a01b03199182161790915560038054929093169116179055565b6002546001600160a01b031633146105e25760405162461bcd60e51b81526020600482015260336024820152600080516020610a028339815191526044820152723932bb37b5b2b210313c9034ba39903ab9b2b960691b6064820152608401610357565b60038054821515600160a01b0260ff60a01b199091161790556040517f2165014523a6f4135deffed62d70149aad59b64de5aac51e3abbcbe2a83e2f7e9061062f90831515815260200190565b60405180910390a150565b6040516323b872dd60e01b81526001600160a01b038581166004830152306024830152604482018590528391908216906323b872dd90606401602060405180830381600087803b15801561068d57600080fd5b505af11580156106a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c5919061090f565b61070f5760405162461bcd60e51b815260206004820152601b60248201527a115490cc8c081d1bdad95b881d1c985b9cd9995c8819985a5b1959602a1b6044820152606401610357565b826001600160a01b0316856001600160a01b03167fd65b48fd35864b3528d38e44760be5553248f89bf3ff6b06cca57817cc2650bf868560405161075492919061095b565b60405180910390a35050505050565b600082601f830112610773578081fd5b81356001600160401b038082111561078d5761078d6109c5565b604051601f8301601f19908116603f011681019082821181831017156107b5576107b56109c5565b816040528381528660208588010111156107cd578485fd5b8360208701602083013792830160200193909352509392505050565b600080604083850312156107fb578182fd5b8235610806816109db565b91506020830135610816816109db565b809150509250929050565b600080600060608486031215610835578081fd5b8335610840816109db565b9250602084013560028110610853578182fd5b915060408401356001600160401b0381111561086d578182fd5b61087986828701610763565b9150509250925092565b60008060008060808587031215610898578081fd5b84356108a3816109db565b93506020850135925060408501356108ba816109db565b915060608501356001600160401b038111156108d4578182fd5b6108e087828801610763565b91505092959194509250565b6000602082840312156108fd578081fd5b8135610908816109f3565b9392505050565b600060208284031215610920578081fd5b8151610908816109f3565b6000825161093d818460208701610995565b9190910192915050565b6001600160a01b0391909116815260200190565b6000838252604060208301528251806040840152610980816060850160208701610995565b601f01601f1916919091016060019392505050565b60005b838110156109b0578181015183820152602001610998565b838111156109bf576000848401525b50505050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146109f057600080fd5b50565b80151581146109f057600080fdfe41757468656e746963617465642070726f78792063616e206f6e6c7920626520a2646970667358221220c7e37dac3031913bd3612b3254e595e9b0339535034743fa287d478e2a4b142164736f6c63430008030033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000f95760003560e01c806268674114620000fe57806306fdde0314620001325780631a86ac4f146200017557806338b6e407146200019b57806353376d1f14620001b45780635eebea2014620001cb578063631d9e3f14620001fd57806369dc9ff31462000207578063715018a6146200022d5780638da5cb5b146200023757806397204d8e1462000241578063c45527911462000255578063d4e8e0631462000281578063dcfa92221462000298578063ddd81f8214620002af578063e71a02e114620002b9578063ef7f383414620002c3578063f2fde38b14620002da575b600080fd5b620001156200010f36600462000b21565b620002f1565b6040516001600160a01b0390911681526020015b60405180910390f35b6200016660405180604001604052806014815260200173466c6169722050726f787920526567697374727960601b81525081565b60405162000129919062000c1b565b6000546200018a90600160a01b900460ff1681565b604051901515815260200162000129565b620001b2620001ac36600462000b21565b62000418565b005b620001b2620001c536600462000b21565b62000574565b620001ee620001dc36600462000b21565b60036020526000908152604090205481565b60405190815260200162000129565b62000115620005c9565b6200018a6200021836600462000b21565b60046020526000908152604090205460ff1681565b620001b262000681565b62000115620006c3565b60015462000115906001600160a01b031681565b620001156200026636600462000b21565b6002602052600090815260409020546001600160a01b031681565b620001b26200029236600462000b21565b620006d2565b620001b2620002a936600462000b45565b620007cc565b6200011562000911565b620001ee60055481565b620001b2620002d436600462000b21565b62000923565b620001b2620002eb36600462000b21565b62000a02565b6001600160a01b03818116600090815260026020526040812054909116156200035c5760405162461bcd60e51b81526020600482015260186024820152775573657220616c72656164792068617320612070726f787960401b60448201526064015b60405180910390fd5b60015460405183916001600160a01b03169062000380908390309060240162000bca565b60408051601f198184030181529181526020820180516001600160e01b031663485cc95560e01b17905251620003b69062000afb565b620003c49392919062000be4565b604051809103906000f080158015620003e1573d6000803e3d6000fd5b506001600160a01b03838116600090815260026020526040902080546001600160a01b03191691831691909117905590505b919050565b3362000423620006c3565b6001600160a01b0316146200044c5760405162461bcd60e51b8152600401620003539062000c30565b6001600160a01b03811660009081526004602052604090205460ff161580156200048d57506001600160a01b03811660009081526003602052604090205415155b8015620004c057506005546001600160a01b0382166000908152600360205260409020544291620004be9162000c65565b105b620005435760405162461bcd60e51b815260206004820152604660248201527f436f6e7472616374206973206e6f206c6f6e6765722070656e64696e67206f7260448201527f2068617320616c7265616479206265656e20617070726f76656420627920726560648201526567697374727960d01b608482015260a40162000353565b6001600160a01b0316600090815260036020908152604080832083905560049091529020805460ff19166001179055565b336200057f620006c3565b6001600160a01b031614620005a85760405162461bcd60e51b8152600401620003539062000c30565b6001600160a01b03166000908152600460205260409020805460ff19169055565b60015460405160009133916001600160a01b0390911690620005f2908390309060240162000bca565b60408051601f198184030181529181526020820180516001600160e01b031663485cc95560e01b17905251620006289062000afb565b620006369392919062000be4565b604051809103906000f08015801562000653573d6000803e3d6000fd5b5033600090815260026020526040902080546001600160a01b0319166001600160a01b038316179055919050565b336200068c620006c3565b6001600160a01b031614620006b55760405162461bcd60e51b8152600401620003539062000c30565b620006c1600062000aab565b565b6000546001600160a01b031690565b33620006dd620006c3565b6001600160a01b031614620007065760405162461bcd60e51b8152600401620003539062000c30565b6001600160a01b03811660009081526004602052604090205460ff161580156200074657506001600160a01b038116600090815260036020526040902054155b620007b05760405162461bcd60e51b815260206004820152603360248201527f436f6e747261637420697320616c726561647920616c6c6f77656420696e2072604482015272656769737472792c206f722070656e64696e6760681b606482015260840162000353565b6001600160a01b03166000908152600360205260409020429055565b6001600160a01b03808316600090815260026020526040902054163381146200084f5760405162461bcd60e51b815260206004820152602e60248201527f50726f7879207472616e736665722063616e206f6e6c792062652063616c6c6560448201526d64206279207468652070726f787960901b606482015260840162000353565b6001600160a01b038281166000908152600260205260409020541615620008d25760405162461bcd60e51b815260206004820152603060248201527f50726f7879207472616e7366657220686173206578697374696e672070726f7860448201526f3c9030b9903232b9ba34b730ba34b7b760811b606482015260840162000353565b6001600160a01b0392831660009081526002602052604080822080546001600160a01b0319908116909155938516825290208054919093169116179055565b60006200091e33620002f1565b905090565b336200092e620006c3565b6001600160a01b031614620009575760405162461bcd60e51b8152600401620003539062000c30565b600054600160a01b900460ff1615620009cc5760405162461bcd60e51b815260206004820152603060248201527f466c6169722050726f787920526567697374727920696e697469616c2061646460448201526f1c995cdcc8185b1c9958591e481cd95d60821b606482015260840162000353565b6000805460ff60a01b1916600160a01b1781556001600160a01b039091168152600460205260409020805460ff19166001179055565b3362000a0d620006c3565b6001600160a01b03161462000a365760405162461bcd60e51b8152600401620003539062000c30565b6001600160a01b03811662000a9d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840162000353565b62000aa88162000aab565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6109c98062000c8b83390190565b80356001600160a01b03811681146200041357600080fd5b60006020828403121562000b33578081fd5b62000b3e8262000b09565b9392505050565b6000806040838503121562000b58578081fd5b62000b638362000b09565b915062000b736020840162000b09565b90509250929050565b60008151808452815b8181101562000ba35760208185018101518683018201520162000b85565b8181111562000bb55782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0384811682528316602082015260606040820181905260009062000c129083018462000b7c565b95945050505050565b60006020825262000b3e602083018462000b7c565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000821982111562000c8557634e487b7160e01b81526011600452602481fd5b50019056fe608060405234801561001057600080fd5b506040516109c93803806109c983398101604081905261002f916101f0565b600180546001600160a01b0319166001600160a01b0385161790556100538261011f565b6000826001600160a01b03168260405161006d91906102bc565b600060405180830381855af49150503d80600081146100a8576040519150601f19603f3d011682016040523d82523d6000602084013e6100ad565b606091505b50509050806101165760405162461bcd60e51b815260206004820152602a60248201527f4f776e61626c6544656c656761746550726f7879206661696c656420696d706c60448201526932b6b2b73a30ba34b7b760b11b60648201526084015b60405180910390fd5b5050505061031e565b6000546001600160a01b038281169116141561018c5760405162461bcd60e51b815260206004820152602660248201527f50726f787920616c72656164792075736573207468697320696d706c656d656e6044820152653a30ba34b7b760d11b606482015260840161010d565b600080546001600160a01b0319166001600160a01b038316908117825560405190917fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b91a250565b80516001600160a01b03811681146101eb57600080fd5b919050565b600080600060608486031215610204578283fd5b61020d846101d4565b925061021b602085016101d4565b60408501519092506001600160401b0380821115610237578283fd5b818601915086601f83011261024a578283fd5b81518181111561025c5761025c610308565b604051601f8201601f19908116603f0116810190838211818310171561028457610284610308565b8160405282815289602084870101111561029c578586fd5b6102ad8360208301602088016102d8565b80955050505050509250925092565b600082516102ce8184602087016102d8565b9190910192915050565b60005b838110156102f35781810151838201526020016102db565b83811115610302576000848401525b50505050565b634e487b7160e01b600052604160045260246000fd5b61069c8061032d6000396000f3fe6080604052600436106100605760003560e01c8063025313a2146100ec5780633659cfe61461011e5780634555d5c9146101405780634f1ef2861461015c5780635c60da1b1461016f5780636fde820214610184578063f1739cae14610199575b600061006a6101b9565b90506001600160a01b0381166100c75760405162461bcd60e51b815260206004820152601d60248201527f50726f787920696d706c656d656e746174696f6e20726571756972656400000060448201526064015b60405180910390fd5b60405136600082376000803683855af43d806000843e8180156100e8578184f35b8184fd5b3480156100f857600080fd5b506101016101c8565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561012a57600080fd5b5061013e6101393660046104f1565b6101d7565b005b34801561014c57600080fd5b5060405160028152602001610115565b61013e61016a366004610512565b61021b565b34801561017b57600080fd5b506101016101b9565b34801561019057600080fd5b5061010161030c565b3480156101a557600080fd5b5061013e6101b43660046104f1565b61031b565b6000546001600160a01b031690565b60006101d261030c565b905090565b6101df6101c8565b6001600160a01b0316336001600160a01b03161461020f5760405162461bcd60e51b81526004016100be90610607565b61021881610420565b50565b6102236101c8565b6001600160a01b0316336001600160a01b0316146102535760405162461bcd60e51b81526004016100be90610607565b61025c826101d7565b6000306001600160a01b03168260405161027691906105ce565b600060405180830381855af49150503d80600081146102b1576040519150601f19603f3d011682016040523d82523d6000602084013e6102b6565b606091505b50509050806103075760405162461bcd60e51b815260206004820152601f60248201527f43616c6c206661696c65642061667465722070726f787920757067726164650060448201526064016100be565b505050565b6001546001600160a01b031690565b6103236101c8565b6001600160a01b0316336001600160a01b0316146103535760405162461bcd60e51b81526004016100be90610607565b6001600160a01b0381166103b55760405162461bcd60e51b8152602060048201526024808201527f4e6577206f776e65722063616e6e6f7420626520746865206e756c6c206164646044820152637265737360e01b60648201526084016100be565b7f5a3e66efaa1e445ebd894728a69d6959842ea1e97bd79b892797106e270efcd96103de6101c8565b604080516001600160a01b03928316815291841660208301520160405180910390a1600180546001600160a01b0319166001600160a01b038316179055610218565b6000546001600160a01b038281169116141561048d5760405162461bcd60e51b815260206004820152602660248201527f50726f787920616c72656164792075736573207468697320696d706c656d656e6044820152653a30ba34b7b760d11b60648201526084016100be565b600080546001600160a01b0319166001600160a01b038316908117825560405190917fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b91a250565b80356001600160a01b03811681146104ec57600080fd5b919050565b600060208284031215610502578081fd5b61050b826104d5565b9392505050565b60008060408385031215610524578081fd5b61052d836104d5565b915060208301356001600160401b0380821115610548578283fd5b818501915085601f83011261055b578283fd5b81358181111561056d5761056d610650565b604051601f8201601f19908116603f0116810190838211818310171561059557610595610650565b816040528281528860208487010111156105ad578586fd5b82602086016020830137856020848301015280955050505050509250929050565b60008251815b818110156105ee57602081860181015185830152016105d4565b818111156105fc5782828501525b509190910192915050565b60208082526029908201527f4f6e6c79207468652070726f7879206f776e65722063616e2063616c6c2074686040820152681a5cc81b595d1a1bd960ba1b606082015260800190565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220f9528ae947ce1e01d62da85ce898df81d4d4b1e0c205a80dff61e36ca1ddab0864736f6c63430008030033a2646970667358221220db9fbf980c46493a47c9d238f47938552abddca34232b139aa977c53c4bcbd8964736f6c63430008030033",
  "devdoc": {
    "author": "Wyvern Protocol Developers",
    "kind": "dev",
    "methods": {
      "endGrantAuthentication(address)": {
        "details": "Registry owner only",
        "params": {
          "addr": "Address to which to grant permissions"
        }
      },
      "grantInitialAuthentication(address)": {
        "details": "No delay, can only be called once - after that the standard registry process with a delay must be used",
        "params": {
          "authAddress": "Address of the contract to grant authentication"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "registerProxy()": {
        "details": "Must be called by the user which the proxy is for, creates a new AuthenticatedProxy",
        "returns": {
          "proxy": "New AuthenticatedProxy contract"
        }
      },
      "registerProxyFor(address)": {
        "details": "Can be called by any user",
        "returns": {
          "proxy": "New AuthenticatedProxy contract"
        }
      },
      "registerProxyOverride()": {
        "details": "Must be called by the user which the proxy is for, creates a new AuthenticatedProxy",
        "returns": {
          "proxy": "New AuthenticatedProxy contract"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revokeAuthentication(address)": {
        "details": "Registry owner only",
        "params": {
          "addr": "Address of which to revoke permissions"
        }
      },
      "startGrantAuthentication(address)": {
        "details": "Registry owner only",
        "params": {
          "addr": "Address to which to grant permissions"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Registry",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "endGrantAuthentication(address)": {
        "notice": "End the process to enable access for specified contract after delay period has passed."
      },
      "grantInitialAuthentication(address)": {
        "notice": "Grant authentication to the initial Flair contract"
      },
      "registerProxy()": {
        "notice": "Register a proxy contract with this registry"
      },
      "registerProxyFor(address)": {
        "notice": "Register a proxy contract with this registry"
      },
      "registerProxyOverride()": {
        "notice": "Register a proxy contract with this registry, overriding any existing proxy"
      },
      "revokeAuthentication(address)": {
        "notice": "Revoke access for specified contract. Can be done instantly."
      },
      "startGrantAuthentication(address)": {
        "notice": "Start the process to enable access for specified contract. Subject to delay period."
      },
      "transferAccessTo(address,address)": {
        "notice": "Transfer access"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3048,
        "contract": "contracts/Registry.sol:Registry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7415,
        "contract": "contracts/Registry.sol:Registry",
        "label": "initialAddressSet",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7418,
        "contract": "contracts/Registry.sol:Registry",
        "label": "delegateProxyImplementation",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 7424,
        "contract": "contracts/Registry.sol:Registry",
        "label": "proxies",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_contract(OwnableDelegateProxy)14631)"
      },
      {
        "astId": 7428,
        "contract": "contracts/Registry.sol:Registry",
        "label": "pending",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7432,
        "contract": "contracts/Registry.sol:Registry",
        "label": "contracts",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7435,
        "contract": "contracts/Registry.sol:Registry",
        "label": "DELAY_PERIOD",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(OwnableDelegateProxy)14631": {
        "encoding": "inplace",
        "label": "contract OwnableDelegateProxy",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_contract(OwnableDelegateProxy)14631)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract OwnableDelegateProxy)",
        "numberOfBytes": "32",
        "value": "t_contract(OwnableDelegateProxy)14631"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}